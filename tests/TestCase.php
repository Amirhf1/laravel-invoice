<?php

namespace dnj\Invoice\Tests;

use dnj\Currency\Contracts\ICurrency;
use dnj\Currency\Contracts\ICurrencyManager;
use dnj\Currency\Contracts\RoundingBehaviour;
use dnj\Currency\CurrencyServiceProvider;
use dnj\Invoice\Contracts\IInvoiceManager;
use dnj\Invoice\Contracts\IPayment;
use dnj\Invoice\Contracts\PaymentStatus;
use dnj\Invoice\InvoiceServiceProvider;
use dnj\Invoice\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TestCase extends \Orchestra\Testbench\TestCase {
	use RefreshDatabase;
	
	public function setUp (): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->withFactories(__DIR__ . '/../database/factories');
	}
	
	protected function defineDatabaseMigrations () {
		$this->loadLaravelMigrations([ '--database' => 'testing' ]);
		$this->artisan('migrate' , [ '--database' => 'testing' ])
			 ->run();
	}
	
	protected function getPackageProviders ( $app ) {
		return [
			CurrencyServiceProvider::class ,
			InvoiceServiceProvider::class ,
		];
	}
	
	public function getInvoiceManager (): IInvoiceManager {
		return $this->app->make(IInvoiceManager::class);
	}
	
	public function getCurrencyManager (): ICurrencyManager {
		return $this->app->make(ICurrencyManager::class);
	}
	
	public function createInvoice ( $userId , $currencyId , array $products , array $localizedDetails , array $meta = [] ) {
		return $this->getInvoiceManager()
					->create($userId , $currencyId , $products , $localizedDetails , $meta);
	}
	
	public function createUSD (): ICurrency {
		return $this->getCurrencyManager()
					->create('USD' , 'US Dollar' , '$' , '' , RoundingBehaviour::CEIL , 2);
	}
	
	public function createEUR (): ICurrency {
		return $this->getCurrencyManager()
					->create('USD' , 'US Dollar' , '$' , '' , RoundingBehaviour::CEIL , 2);
	}
	
	public function createUser () {
		return factory(User::class)->create();
	}
	
	public function products () {
		return [
			[
				'title' => 'product1' ,
				'price' => 125.000 ,
				'count' => 2 ,
			] ,
			[
				'title' => 'product2' ,
				'price' => 153.000 ,
				'discount' => 120.000 ,
				'count' => 1 ,
			] ,
		];
	}
	
	public function createPaymentInvioce (): IPayment {
		$user = $this->createUser();
		$USD = $this->createUSD();
		$invoice = $this->createInvoice($user->id , $USD->getID() , $this->products() , [ 'title' => 'invoice one' ]);
		$payment = $this->getInvoiceManager()
						->addPaymentToInvoice($invoice->getID() , 'online' , $invoice->getAmount() , PaymentStatus::PENDING , [
							'key' => 'value',
						]);
		
		return $payment;
	}
}